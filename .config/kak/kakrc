# Tabstop is printed as 4 spaces
set-option global tabstop 4
# Use tab to align
set-option global aligntab true

# Use cat instead of clippy as assistant
# Disable mouse
set-option global ui_options \
        ncurses_assistant=cat \
        ncurses_enable_mouse=false

# Add line number, relative to the cursor and highlight current one
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces
add-highlighter global/ wrap -width 80 -indent -word
add-highlighter global/ column 80 default,rgb:7c6f64

map global user w ':write<ret>' -docstring 'Save the buffer'
map global user q ':quit<ret>' -docstring 'Quit the buffer'
map global user Q ':write-all-quit<ret>' -docstring 'Save all and quit'

map global normal <a-,> ':enter-user-mode<space>lsp<ret>'

colorscheme gruvbox

# Use jj as <esc>
hook global InsertChar j %{ try %{
      exec -draft hH <a-k>jj<ret> d
        exec <esc>
}}

# use <tab> and <s-tab> for completions
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    try %{
        unmap window insert <tab> <c-n>
        unmap window insert <s-tab> <-p>
    }
}

def suspend-and-resume \
    -params 1..2 \
    -docstring 'suspend-and-resume <cli command> [<kak command after resume>]: backgrounds current kakoune client and runs specified cli command.  Upon exit of command the optional kak command is executed.' \
    %{ evaluate-commands %sh{

    # Note we are adding '&& fg' which resumes the kakoune client process after the cli command exits
    cli_cmd="$1 && fg"
    post_resume_cmd="$2"

    automate_cmd="ydotool type --key-delay 0 '$cli_cmd'; ydotool key enter"
    kill_cmd="/usr/bin/kill"

    # Uses platforms automation to schedule the typing of our cli command
    nohup sh -c "$automate_cmd"  > /dev/null 2>&1 &
    # Send kakoune client to the background
    $kill_cmd -SIGTSTP $kak_client_pid

    # ...At this point the kakoune client is paused until the " && fg " gets run in the $automate_cmd

    # Upon resume, run the kak command is specified
    if [ ! -z "$post_resume_cmd" ]; then
        echo "$post_resume_cmd"
    fi
}}

define-command -docstring 'Invoke fzy to open a file' -params 0 fzy-filename %{
    evaluate-commands %sh{
        output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-fzy.XXXXXXXX)/fifo
        mkfifo ${output}
        ( lr > ${output} 2>&1 ) > /dev/null 2>&1 < /dev/null &

        printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
            suspend-and-resume \"fzy < ${output}\"
        }"
    }
}

eval %sh{kak-lsp --kakoune -s $kak_session}
nop %sh{ (kak-lsp -s $kak_session -vvv ) > /tmp/kak-lsp.log 2>&1 < /dev/null & }
lsp-enable
#hook global WinSetOption filetype=(python|c|cpp) %{
#        lsp-enable-window
#}

# Plugins support
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Highlight colors for kakoune palette
#plug 'delapouite/kakoune-palette'

#plug 'alexherbo2/yank-ring.kak'
#map global normal Y ':<space>yank-ring<ret>'
#map global normal <c-p> ':<space>yank-ring<ret><c-p>'
#map global normal <c-n> ':<space>yank-ring<ret><c-n>'

plug 'alexherbo2/auto-pairs.kak'

plug 'Delapouite/kakoune-buffers'

hook global WinDisplay .* info-buffers

# ciao macros
map global normal ^ q
map global normal <a-^> Q

map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>

map global normal b ':enter-buffers-mode<ret>' -docstring 'buffers…'
map global normal B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'

